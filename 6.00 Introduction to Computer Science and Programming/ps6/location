import random
from statistics import stdev
import pylab

class Location(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def move(self, deltaX, deltaY):
        return Location(self.x + deltaX, self.y + deltaY)
    def getX(self):
        return self.x
    def getY(self):
        return self.y
    def distFrom(self, other):
        ox = other.x
        oy = other.y
        xDist = self.x - ox
        yDist = self.y - oy
        return (xDist ** 2 + yDist ** 2) ** 0.5
    def __str__(self):
        return "<" + str(self.x), + "," + str(self.y), + ">"


class Field(object):
    def __init__(self):
        self.drunks = {}
    def addDrunk(self, drunk, loc):
        if drunk in self.drunks:
            raise ValueError('duplicate drunk')
        else:
            self.drunks[drunk] = loc
    def moveDrunk(self, drunk):
        if not drunk in self.drunks:
            raise ValueError('drunk not in field')
        
        xDist, yDist = drunk.takeStep()
        currentLocation = self.drunks[drunk]
        self.drunks[drunk] = currentLocation.move(xDist, yDist)

    def getLoc(self, drunk):
        if not drunk in self.drunks:
            raise ValueError('drunk not in field')
        return self.drunks[drunk]

class Drunk(object):
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return 'This drunk named ' + self.name

class UsualDrunk(Drunk):
    def takeStep(self):
        stepChoices = [(0.0, 1.0), (0.0, -1.0), (1.0, 0.0), (-1.0, 0.0)]
        return random.choice(stepChoices)

class ColdDrunk(Drunk):
    def takeStep(self):
        stepChoices = [(0.0, 1.0), (0.0, -2.0), (1.0, 0.0), (-1.0, 0.0)]
        return random.choice(stepChoices)

class EWDrunk(Drunk):
    def takeStep(self):
        stepChoices = [(1.0, 0.0), (-1.0, 0.0)]
        return random.choice(stepChoices)

class DrunkKinds(object):
    kinds = [UsualDrunk, ColdDrunk, EWDrunk]

class styleIterator(object):
    def __init__(self, styles):
        self.index = 0
        self.styles = styles
    def nextStyle(self):
        result = self.styles[self.index]
        self.index = (self.index + 1) % len(self.styles)
        return result

class oddField(Field):
    def __init__(self, numHoles, xRange, yRange):
        Field.__init__(self)
        self.wormholes = {}
        for w in range(numHoles):
            x =  random.randint(-xRange, xRange)
            y = random.randint(-yRange, yRange)
            newX = random.randint(-xRange, xRange)
            newY = random.randint(-yRange, yRange)
            newLoc = Location(newX, newY)
            self.wormholes[(x,y)] = newLoc
    def moveDrunk(self, drunk):
        Field.moveDrunk(self, drunk)
        x = self.getLoc(drunk).getX()
        y = self.getLoc(drunk).getY()
        if (x, y) in self.wormholes:
            self.drunks[drunk] = self.wormholes[(x, y)]

def simAll(numTrials):
    numStepsList = [10, 100, 1000, 10000, 100000]
    styleChoice = styleIterator(('b-', 'r:', 'm-.'))
    for dClass in DrunkKinds.kinds:
        curStyle = styleChoice.nextStyle()
        print 'Starting sumulation of', dClass.__name__
        means, cvs = sumDrunk(numTrials, dClass, numStepsList)
        cvSum = 0.0
        for cv in cvs:
            cvSum += cv
        cvMean = str(round(cvSum / len(cvs), 4))
        pylab.figure(1)
        pylab.plot(numStepsList, means, curStyle, label = dClass.__name__ + '(CV = ' + cvMean + ')')
    pylab.figure(1)
    pylab.title('Average Distance from Origin (' + str(numTrials) + ' Trials)')
    pylab.xlabel('Number of Steps')
    pylab.ylabel('Distance from Origin')
    pylab.legend(loc = 'best')
    pylab.semilogx()
    pylab.semilogy()
    pylab.show()
        

def walk(f, d, numSteps):
    start = f.getLoc(d)
    for s in range(numSteps):
        f.moveDrunk(d)
    return start.distFrom(f.getLoc(d))

def CV(x):
    mean = sum(x) / float(len(x))
    try:
        return stdev(x) / mean
    except ZeroDivisionError:
        return float('NaN')

def simWalks(numSteps, numTrials, dClass):
    homer = dClass('Homer')
    origin = Location(0.0, 0.0)
    distances = []
    for t in range(numTrials):
        f = Field()
        f.addDrunk(homer, origin)
        distances.append(walk(f, homer, numSteps))
    return distances

def drunkTest(numTrials, dClass):
    for numSteps in [10, 100, 1000, 10000]:
        distances = simWalks(numSteps, numTrials, dClass)
        print(dClass.__name__ + ' random walk of ' + str(numSteps) + ' Steps')
        print 'Mean= ', sum(distances)/len(distances), 'CV =', CV(distances)
        print ' Max =', max(distances), ' Min =', min(distances)

def sumDrunk(numTrials, dClass, numStepsList):
    meanDistances = []
    cvDistances = []
    for numSteps in numStepsList:
        print 'Starting sumulatin of', numSteps, 'Steps'
        trials = simWalks(numSteps, numTrials, dClass)
        mean = sum(trials) / float(len(trials))
        meanDistances.append(mean)
        cvDistances.append(stdev(trials) / mean)
    return (meanDistances, cvDistances)

def getFinalLocs(numSteps, numTrials, dClass):
    locs = []
    d = dClass('homer')
    origin = Location(0,0)
    for t in range(numTrials):
        f = Field()
        f.addDrunk(d, origin)
        for s in range(numSteps):
            f.moveDrunk(d)
        locs.append(f.getLoc(d))
    return locs

def plotLocs(numSteps, numTrials):
    styleChoice = styleIterator(('b+', 'r^', 'mo'))
    for dClass in DrunkKinds.kinds:
        locs = getFinalLocs(numSteps, numTrials, dClass)
        xVals = []
        yVals = []
        for l in locs:
            xVals.append(l.getX())
            yVals.append(l.getY())

        meanX = sum(xVals) / float(len(xVals))
        meanY = sum(yVals) / float(len(yVals))
        curStyle = styleChoice.nextStyle()
        pylab.figure(1)
        pylab.plot(xVals, yVals, curStyle,
                   label = dClass.__name__
                   + ' Ave. loc. = <'
                   + str(meanX) + ', ' + str(meanY) + '>')
    xMin, xMax = pylab.xlim()
    yMin, yMax = pylab.ylim()
    pylab.xlim(min(xMin, yMin), max(xMax, yMax))
    pylab.ylim(min(xMin, yMin), max(xMax, yMax))
    pylab.title('Location at End of Walks ('
                + str(numSteps) + ' steps)')
    pylab.xlabel('Step East/West of Origin')
    pylab.ylabel('Step North/South of Origin')
    pylab.legend(loc = 'lower left', numpoints = 1)
    pylab.show()

def traceWalk(numSteps):
    styleChoice = styleIterator(('b+', 'r^', 'mo'))
    f = oddField(1000, 100, 200)
    for dClass in DrunkKinds.kinds:
        d = dClass('Olga')
        f.addDrunk(d, Location(0.0, 0.0))
        locs = []
        for s in range(numSteps):
            f.moveDrunk(d)
            locs.append(f.getLoc(d))
        xVals = []
        yVals = []
        for l in locs:
            xVals.append(l.getX())
            yVals.append(l.getY())
        curStyle = styleChoice.nextStyle()
        pylab.plot(xVals, yVals, curStyle,
                   label = dClass.__name__)
    pylab.title('Spots Visted  on Walk (' + str(numSteps) + ' steps)')
    pylab.xlabel('Step East/West of Origin')
    pylab.ylabel('Step North/South of Origin')
    pylab.legend(loc = 'best')
    pylab.show()
    

traceWalk(200)



        
